package org.raygoza.vcf.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.Vector;
import java.util.regex.Pattern;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.io.IOUtils;
import org.raygoza.vcf.interval.IntervalTree;
import org.raygoza.vcf.io.VcfReader;
import org.raygoza.vcf.model.Feature;
import org.raygoza.vcf.model.VcfEntry;
import org.raygoza.vcf.model.VcfModel;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author raygoza
 */
public class VcfViewerMain extends javax.swing.JFrame {

	/**
	 * Creates new form NewJFrame
	 */
	public VcfViewerMain() {
		initComponents();
	}
	
	

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() {

		jToolBar1 = new javax.swing.JToolBar();
		jButton1 = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		jMenuBar1 = new javax.swing.JMenuBar();
		gbkButton = new JButton("GBK");
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jToolBar1.setRollover(true);
		fc= new JFileChooser();
		jButton1.setText("Gff");
		jToolBar1.add(jButton1);
		jToolBar1.add(gbkButton);
		getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);
		setTitle("Vcf Viewer");
		jTable1.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {
						{null, null, null, null,null},

				},
				new String [] {
						"Chromosome", "Pos", "Ref", "Alt","Type"
				}
				));
		jScrollPane1.setViewportView(jTable1);
		me = this;
		getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);


		gbkButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {

				try {
					int retval =fc.showOpenDialog(me);
					if(retval == JFileChooser.APPROVE_OPTION) {




					}
				}catch(Exception fnex) {

				}

			}
		});

		jButton1.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					int retval =fc.showOpenDialog(me);
					if(retval == JFileChooser.APPROVE_OPTION) {
						IntervalTree<Feature> tree = new IntervalTree<Feature>();
						BufferedReader rd = new BufferedReader(new FileReader(fc.getSelectedFile()));
						String line ="";

						while(true) {
							line=rd.readLine();
							if(line==null) break;
							if(line.startsWith("#")) continue;
							String[] values = line.split("\t");

							if(values[2].equals("gene")) {
								Feature feat = new Feature(line);
								tree.addInterval(feat.getStart(), feat.getEnd(), feat);

							}

						}

						for(int i=0; i < jTable1.getRowCount();i++) {
							List<Feature> genes = tree.get(Long.parseLong(jTable1.getModel().getValueAt(i, 1).toString()));
							if(genes.size()>0) {
								System.out.println(genes.get(0));
								Feature ft = genes.get(0);
								jTable1.getModel().setValueAt(genes.get(0).getName(), i, 5);

								String description = getFeatureDescription(genes.get(0).getName());
								String seq = getFeatureSequence(genes.get(0).getName());
								
								int varpos= Integer.parseInt(jTable1.getModel().getValueAt(i, 1).toString());
								
								int genepos = varpos -ft.getStart();
								
								 
								
								if(genes.get(0).getStrand().equals("+")) {
									 
								}
								jTable1.getModel().setValueAt(description, i, 6);
							}else {
								jTable1.getModel().setValueAt("Non-coding", i, 7);
							}
						}


						jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
						TableColumnAdjuster tca = new TableColumnAdjuster(jTable1);
						tca.adjustColumns();

					}
				}catch(Exception ex) {
					ex.printStackTrace();
				}
			}
		});

		createMenuBar(jMenuBar1);
		setJMenuBar(jMenuBar1);

		setSize(400,500);
		setLocationRelativeTo(null);
	}// </editor-fold>                        


	public String getFeatureDescription(String feature) {
		try {

			if(features.containsKey(feature.trim().toLowerCase())) return features.get(feature.trim().toLowerCase());

			DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = dbfac.newDocumentBuilder();
			URL url = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=gene&term="+feature);
			docBuilder.setEntityResolver( new BlankingResolver() );
			Document doc = docBuilder.parse(url.openStream());


			NodeList ndl = doc.getElementsByTagName("Id");

			if(ndl.getLength()==0) return "";

			Element el = (Element) ndl.item(0);
			
			URL url2 = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=gene&id="+el.getTextContent()+"&rettype=gb&retmode=text"); 
			
			String gb = IOUtils.toString(url2.openStream());

			StringReader rd = new StringReader(gb);
			System.out.println(el.getTextContent());
			BufferedReader rd2 = new BufferedReader(rd);
			rd2.readLine();
			rd2.readLine();
			
			String[] vals =rd2.readLine().split(Pattern.quote("[")); 
			features.put(feature.trim().toLowerCase(), vals[0]);
			return vals[0];

		}catch(Exception ex) {
			ex.printStackTrace();
		}
		return "";
	}

	
	public String getFeatureSequence(String feature) {
		try {

			if(sequences.containsKey(feature.trim().toLowerCase())) return sequences.get(feature.trim().toLowerCase());

			DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = dbfac.newDocumentBuilder();
			URL url = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=gene&term="+feature);
			docBuilder.setEntityResolver( new BlankingResolver() );
			Document doc = docBuilder.parse(url.openStream());


			NodeList ndl = doc.getElementsByTagName("Id");

			if(ndl.getLength()==0) return "";

			Element el = (Element) ndl.item(0);
			
			URL url2 = new URL("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id="+el.getTextContent()+"&rettype=fasta&retmode=text"); 
			
			String gb = IOUtils.toString(url2.openStream());

			StringReader rd = new StringReader(gb);
			
			BufferedReader rd2 = new BufferedReader(rd);
			rd2.readLine();
			String sequence = "";
			String line;
			while(true) {
				line = rd2.readLine();
				if(line==null) break;
				sequence+=line;
			}
			
			sequences.put(feature, sequence);
			
			return sequence;

		}catch(Exception ex) {
			ex.printStackTrace();
		}
		return "";
	}

	public void createMenuBar(javax.swing.JMenuBar menuBar) {


		JMenu file = new JMenu("File");

		JMenuItem open = new JMenuItem("Open...");
		open.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {

				try {
					int retval =fc.showOpenDialog(me);
					if(retval == JFileChooser.APPROVE_OPTION) {
						VcfReader reader = new VcfReader();
						model = reader.readModel(fc.getSelectedFile().getAbsolutePath());

						updateUI(model);
						setTitle("VCF Viewer - "+model.getModel_name());
					}
				}catch(Exception ex) {
					ex.printStackTrace();
				}
			}
		});

		JMenuItem quit = new JMenuItem("Quit");
		quit.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				System.exit(0);

			}
		});
		file.add(open);
		file.add(quit);
		menuBar.add(file);
	}


	private void updateUI(VcfModel model) {

		Vector<String> chroms = model.getChromosomes(); 

		DefaultTableModel tmodel = new DefaultTableModel(new Object[] {"Chromosome","Pos","Ref","Alt","Type","Feature","Feature Description","Effect Type","Effect","P not REF","Depth","Variant %"},0);

		for(String chrom: chroms) {

			Vector<VcfEntry> entries = model.getEntries(chrom);

			for(VcfEntry entry: entries) {
				String type="";
				if(isSNP(entry)) {
					type="SNP";
				}
				tmodel.addRow(new Object[] {chrom,Long.valueOf(entry.getStart()),entry.getRef(),entry.getAlt(),type,"","","","",1-entry.getQuality(),entry.getProperty("DP"),entry.getPropertyAsInt("DP")*100.0});


			}


		}
		jTable1.setModel(tmodel);
		
	}

	private boolean isSNP(VcfEntry entry) {

		if(entry.getAlt().length()==1 && entry.getRef().length()==1 && entry.getAlt().toUpperCase().matches("[A|C|G|T]") && entry.getRef().toUpperCase().matches("[A|C|G|T]")) return true;

		return false;
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			ex.printStackTrace();
			java.util.logging.Logger.getLogger(VcfViewerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			ex.printStackTrace();
			java.util.logging.Logger.getLogger(VcfViewerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			ex.printStackTrace();
			java.util.logging.Logger.getLogger(VcfViewerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			ex.printStackTrace();
			java.util.logging.Logger.getLogger(VcfViewerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new VcfViewerMain().setVisible(true);
			}
		});
	}
	// Variables declaration - do not modify                     
	private javax.swing.JButton jButton1;
	private javax.swing.JButton gbkButton;
	private javax.swing.JFileChooser fc;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable jTable1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JFrame me;
	VcfModel model=null;
	HashMap<String, String> features = new HashMap<String, String>();
	HashMap<String, String> sequences = new HashMap<String, String>();
	// End of variables declaration

	class BlankingResolver implements EntityResolver
	{

		public InputSource resolveEntity( String arg0, String arg1 ) throws SAXException,
		IOException
		{

			return new InputSource( new ByteArrayInputStream( "".getBytes() ) );
		}

	}

}


